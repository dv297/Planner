// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @default(now()) @updatedAt
  TeamUsers      TeamUsers[]
  UserPreference UserPreference[]
  Issue          Issue[]
}

model Team {
  id             String           @id @unique @default(cuid())
  name           String
  TeamUsers      TeamUsers[]
  TeamWorkspace  TeamWorkspace[]
  TeamInvite     TeamInvite[]
  UserPreference UserPreference[]
}

model TeamUsers {
  id     String  @id @unique @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  team   Team    @relation(fields: [teamId], references: [id])
  role   Role    @default(MEMBER)
  userId String?
  teamId String
}

model Workspace {
  id             String           @id @unique @default(cuid())
  name           String?
  tag            String?
  Project        Project[]
  Issue          Issue[]
  UserPreference UserPreference[]
  TeamWorkspace  TeamWorkspace[]
  KeyIssue       KeyIssue[]
  Sprint         Sprint[]
}

model TeamWorkspace {
  id          String    @id @unique @default(cuid())
  team        Team      @relation(fields: [teamId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  teamId      String
  workspaceId String
}

model Project {
  id                 String               @id @unique @default(cuid())
  workspace          Workspace            @relation(fields: [workspaceId], references: [id])
  workspaceId        String
  keyIssue           KeyIssue?
  issues             Issue[]
  ProjectMapPosition ProjectMapPosition[]
  ProjectMapEdgesSet ProjectMapEdgesSet?
}

model KeyIssue {
  id                  String      @id @unique @default(cuid())
  title               String?
  description         String?
  project             Project     @relation(fields: [projectId], references: [id])
  workspace           Workspace   @relation(fields: [workspaceId], references: [id])
  issueStatus         IssueStatus @default(PLANNING)
  projectId           String      @unique
  workspaceId         String
  workspaceIssueCount Int?        @default(-1)
}

model Issue {
  id                  String      @id @unique @default(cuid())
  title               String?
  description         String?
  project             Project     @relation(fields: [projectId], references: [id])
  workspace           Workspace   @relation(fields: [workspaceId], references: [id])
  issueStatus         IssueStatus @default(PLANNING)
  workspaceId         String
  projectId           String
  workspaceIssueCount Int?        @default(-1)
  assignee            User?       @relation(fields: [assigneeId], references: [id])
  assigneeId          String?
  sprint              Sprint?     @relation(fields: [sprintId], references: [id])
  sprintId            String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id                 String     @id @unique @default(cuid())
  user               User       @relation(fields: [userId], references: [id])
  hasFinishedSetup   Boolean?   @default(false)
  selected_workspace Workspace? @relation(fields: [workspaceId], references: [id])
  userId             String     @unique
  workspaceId        String?
  selectedTeam       Team?      @relation(fields: [teamId], references: [id])
  teamId             String?
}

model ProjectMapPosition {
  id        String  @id @unique @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  data      Json?
  projectId String  @unique
}

model ProjectMapEdgesSet {
  id        String  @id @unique @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  data      Json?
  projectId String  @unique
}

model IssueRelation {
  projectId         String
  sourceIssueId     String
  targetIssueId     String
  issueRelationType IssueRelationType @default(DEPENDS_ON)

  @@id([sourceIssueId, targetIssueId])
}

model TeamInvite {
  id          String    @id @unique @default(cuid())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  email       String
  createdAt   DateTime? @default(now())
  inviteToken String    @unique @default(cuid())
  isAccepted  Boolean?  @default(false)
  isExpired   Boolean?  @default(false)
}

model Sprint {
  id          String    @id @unique @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  name        String
  beginDate   DateTime?
  endDate     DateTime?
  workspaceId String
  Issue       Issue[]
}

enum IssueRelationType {
  DEPENDS_ON
  RELATES_TO
}

enum IssueStatus {
  PLANNING
  NOT_STARTED
  IN_PROGRESS
  READY_FOR_REVIEW
  COMPLETE
  CLOSED
}

enum Role {
  ADMIN
  MEMBER
}
